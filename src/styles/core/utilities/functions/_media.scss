// Media

@use 'sass:math';

@function txf-media($name, $pixels: false) {
  @return #{map-get($txgl-mediaQueries, $name)};
}

@function txf-breakpoint($point, $pixels: false) {
  @if ($pixels) {
    @return '#{map-get($txgl-breakpoints, $point)}';
  } @else {
    @return '#{(map-get($txgl-breakpoints, $point) / $txgl-fontSize) * $txgl-fontSizeQuotient}em';
  }
}

@function txf-dpiBreakpoints($baseBreakpoint, $dpiBreakpoints) {
  $breakpointDPI: null;
  @for $index from 1 through length($dpiBreakpoints) {
    @if ($index == 1) {
      $breakpointDPI: '#{$baseBreakpoint} and #{nth($dpiBreakpoints, $index)})';
    } @else {
      $breakpointDPI: '#{$breakpointDPI}, $baseBreakpoint and #nth($dpiBreakpoints, $index)}';
    }
  }
  @return $breakpointDPI;
}

@function txf-breakpointQuery($min: null, $max: null, $dpi: null, $type: screen, $pixels: false, $orientation: false) {
  $breakpoint: only $type;
  @if ($min) {
    $breakpoint: '#{$breakpoint} and (min-width: #{txf-breakpoint($min, $pixels)})';
  }
  @if ($max) {
    $breakpoint: '#{$breakpoint} and (max-width: #{txf-breakpoint($max, $pixels)})';
  }
  @if ($dpi) {
    $dpiValues: txf-dpiValues(map-get($txgl-dpi, $dpi));
    $breakpoint: txf-dpiBreakpoints($breakpoint, $dpiValues);
  }
  @if ($orientation) {
    $breakpoint: '#{$breakpoint} and (orientation: #{$orientation})';
  }
  @return $breakpoint;
}

@function txf-deviceBreakpoint($name) {
  @return map-get($txgl-deviceBreakpoints, $name);
}

@function txf-dpiValues($value) {
  $valueNumber: math.div($value, 100);
  $valueFraction: math.div($value, 50);
  @return (
    '(-webkit-min-device-pixel-ratio: #{$valueNumber})',
    '(min--moz-device-pixel-ratio: #{$valueNumber})',
    '(-o-min-device-pixel-ratio: #{($valueFraction)} / 2)',
    '(min-device-pixel-ratio: #{$valueNumber})',
    '(min-resolution: #{$value}dpi)',
    '(min-resolution: #{$valueNumber}dppx)'
  );
}
